{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","axios","get","then","response","data","newObject","post","res","id","put","Notification","message","Footer","style","color","fontStyle","fontSize","position","bottom","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","catch","e","console","log","notesToShow","filter","map","key","find","n","changedNote","returnedNote","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","length","Math","random","concat","value","onChange","target","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.21b6dd17.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? \"make not important\" : \"make important\";\n  return (\n    <li className=\"note\">\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  );\n};\n\nexport default Note;\n","import axios from \"axios\";\n// const baseUrl = \"https://morning-plains-74293.herokuapp.com/api/notes\";\nconst baseUrl = \"/api/notes\";\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then((response) => response.data);\n};\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then((res) => res.data);\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then((res) => res.data);\n};\n\nexport default {\n  getAll,\n  create,\n  update,\n};\n","import React from \"react\";\n\nconst Notification = ({ message }) => {\n  if (message === null || message === \"\") {\n    return null;\n  }\n  return <div className=\"error\">{message}</div>;\n};\n\nexport default Notification;\n","import React from \"react\";\n\nconst Footer = () => {\n  const footerStyle = {\n    color: \"green\",\n    fontStyle: \"italic\",\n    fontSize: 16,\n    position: \"absolute\",\n    bottom: 16,\n  };\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Copyright Â© 2020 Nirmal Patel </em>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React, { useState, useEffect } from \"react\";\nimport Note from \"./components/Note\";\nimport noteService from \"./services/notes\";\nimport \"./App.css\";\nimport Notification from \"./components/Notification\";\nimport Footer from \"./components/Footer\";\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"\");\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then((initialNotes) => {\n        setNotes(initialNotes);\n      })\n      .catch((e) => console.log(e));\n  }, []);\n\n  const addNote = (event) => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      id: notes.length + 1,\n      important: Math.random() > 0.5,\n    };\n    noteService.create(noteObject).then((returnedNote) => {\n      setNotes(notes.concat(returnedNote));\n      setNewNote(\"\");\n    });\n\n    // setNotes(notes.concat(noteObject));\n    // setNewNote(\"\");\n  };\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find((n) => n.id === id);\n    const changedNote = {\n      ...note,\n      important: !note.important,\n    };\n\n    noteService\n      .update(id, changedNote)\n      .then((returnedNote) => {\n        setNotes(notes.map((note) => (note.id !== id ? note : returnedNote)));\n      })\n      .catch((error) => {\n        setErrorMessage(\n          `Note ${note.content} was already removed from server.`\n        );\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 4000);\n      });\n  };\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter((note) => {\n        return note.important;\n      });\n  const handleNoteChange = (e) => {\n    setNewNote(e.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          Show {showAll ? \"'important'\" : \"'all'\"}\n        </button>\n      </div>\n\n      <br />\n      <ul>\n        {notesToShow.map((note) => (\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        ))}\n      </ul>\n      <br />\n\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">Save</button>\n      </form>\n\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}